package com.example.banglagan.data

import kotlinx.coroutines.flow.Flow // Flow ??????? ???? ???? ???????
// ?????????? ???????????? ????? ?????

// SongDao ????? constructor parameter ?????? ??? ??? ?????
class SongRepository(private val songDao: SongDao) {

    // ?? ??? ?????? ???? Flow (DAO ???? ??????)
    val allSongs: Flow<List<Song>> = songDao.getAllSongs()

    // ????? ??????? ?????? ???? Flow
    val favoriteSongs: Flow<List<Song>> = songDao.getFavoriteSongs()

    // ???? ????????? ??? ???? ???? ?????? ????
    fun getSongById(songId: Int): Flow<Song?> {
        return songDao.getSongById(songId)
    }

    // ??? ????? ???? ????
    fun searchSongs(query: String): Flow<List<Song>> {
        if (query.isBlank()) {
            return allSongs
        }
        return songDao.searchSongs(query)
    }

    // ?????? ??????? ??? ??????? ???? ????
    fun getSongsByArtist(artistName: String): Flow<List<Song>> {
        return songDao.getSongsByArtist(artistName)
    }

    // ????? ??? (Genre) ??????? ??????? ???? ????
    fun getSongsByGenre(genreName: String): Flow<List<Song>> {
        return songDao.getSongsByGenre(genreName)
    }

    // ???? ???? ??? ??? ???? ????
    suspend fun insertSong(song: Song) {
        songDao.insertSong(song)
    }

    // ?????? ??? ??? ???? ????
    suspend fun insertMultipleSongs(songs: List<Song>) {
        songDao.insertAllSongs(songs)
    }

    // ???? ??? ????? ???? ????
    suspend fun updateSong(song: Song) {
        songDao.updateSong(song)
    }

    // ???? ??? ????? ???? ????
    suspend fun deleteSong(song: Song) {
        songDao.deleteSong(song)
    }
}